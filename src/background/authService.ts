// src/background/authService.ts

const AUTH_URL = 'https://openapi.vito.ai/v1/authenticate';
// const CLIENT_ID = process.env.RTZR_CLIENT_ID;
// const CLIENT_SECRET = process.env.RTZR_CLIENT_SECRET;
const CLIENT_ID     = import.meta.env.RTZR_CLIENT_ID as string
const CLIENT_SECRET = import.meta.env.RTZR_CLIENT_SECRET as string


let accessToken = '';
let expireAt = 0; // UNIX timestamp (Ï¥à)

/**
 * /v1/authenticate Ìò∏Ï∂ú ‚Üí ÌÜ†ÌÅ∞ Ï†ÄÏû•
 */
// authService.ts ÎÇ¥ authenticate Ìï®Ïàò Ï†ÑÏ≤¥
async function authenticate(): Promise<void> {

  
  // (ÎîîÎ≤ÑÍπÖÏö©) Ïã§Ï†úÎ°ú Ï£ºÏûÖÎêú Í∞í ÌôïÏù∏
  console.log('‚ñ∂ CLIENT_ID:', JSON.stringify(CLIENT_ID));
  console.log('‚ñ∂ CLIENT_SECRET:', JSON.stringify(CLIENT_SECRET));

  const body = new URLSearchParams({
    client_id: CLIENT_ID,
    client_secret: CLIENT_SECRET,
  });

  console.log('[SW] ‚ñ∂ AUTH_URL:', AUTH_URL);
console.log('[SW] ‚ñ∂ PAYLOAD:', body.toString());


  try {
    const res = await fetch(AUTH_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
      },
      body: body.toString(),
    });

    if (!res.ok) {
      // ÏóêÎü¨ ÏùëÎãµ Î≥∏Î¨∏ÍπåÏßÄ Î°úÍπÖ
      const errBody = await res.json().catch(() => null);
      console.error('üõë Auth error response body:', errBody);
      throw new Error(`Auth failed: HTTP ${res.status}`);
    }

    const { access_token, expire_at } = await res.json();
    accessToken = access_token;
    expireAt = expire_at;

    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÎèÑ Ï†ÄÏû•
    await chrome.storage.local.set({
      rtzrToken: accessToken,
      rtzrExpireAt: expireAt,
    });

    console.log('‚úÖ RTZR token acquired, expires at', new Date(expireAt * 1000));
  } catch (err) {
    console.error('üî¥ RTZR auth failed:', err);
  }
}


/**
 * Î©îÏãúÏßÄÎ°ú ÌÜ†ÌÅ∞ ÏöîÏ≤≠ Ï≤òÎ¶¨
 */
chrome.runtime.onMessage.addListener((msg, _sender, sendResponse) => {
  if (msg.action === 'getToken') {
    const nowSec = Date.now() / 1000;
    const needsRefresh = nowSec > expireAt - 300;
    const reply = () => sendResponse({ token: accessToken });
    if (needsRefresh) {
      authenticate().then(reply);
    } else {
      reply();
    }
    return true; // ÎπÑÎèôÍ∏∞ ÏùëÎãµ
  }
});

/**
 * ÏÑ§Ïπò/ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏôÄ 5.5ÏãúÍ∞ÑÎßàÎã§ ÌÜ†ÌÅ∞ Í∞±Ïã† ÏòàÏïΩ
 */
chrome.runtime.onInstalled.addListener(() => {
  authenticate();
  chrome.alarms.create('rtzrRefresh', { periodInMinutes: 330 });
});
chrome.alarms.onAlarm.addListener(alarm => {
  if (alarm.name === 'rtzrRefresh') authenticate();
});
